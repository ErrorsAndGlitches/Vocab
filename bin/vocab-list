#!/usr/bin/env ruby

require 'mysql2'
require 'optparse'
require 'open-uri'
require 'yaml'
require 'aws-sdk'

require_relative 'command_line_options'
require_relative '../lib/anki_note_cards'
require_relative '../lib/s3_file'
require_relative '../lib/dictionaries/merriam_webster_dictionary'
require_relative '../lib/dictionaries/multi_dictionary'
require_relative '../lib/dictionaries/sqlite_dictionary'
require_relative '../lib/vocab_lists/file_vocab_list'
require_relative '../lib/vocab_lists/kindle_sqlite_vocab_list'
require_relative '../lib/vocab_lists/sqlite_vocab_list'

cmd_line_opts = CommandLineOptions.new(ARGV)
fail('SQLite configuration required') if cmd_line_opts.sqlite_config_file.nil?

sqlite_config = YAML.load(File.read(cmd_line_opts.sqlite_config_file))
creds = YAML.load(File.read(sqlite_config['credentials_filename']))
s3_client = Aws::S3::Client.new(
  access_key_id: creds['access_key_id'],
  secret_access_key: creds['secret_access_key']
)

sqlite_s3_file = S3File.new(s3_client, sqlite_config['bucket_name'], sqlite_config['key_name'])

if cmd_line_opts.sqlite_create_or_read_db
  sqlite_vocab_list = SqliteVocabList.new(sqlite_s3_file.local_filepath, cmd_line_opts.update_existing?)
  sqlite_vocab_list.create_table
else
  sqlite_s3_file.download
  sqlite_vocab_list = SqliteVocabList.new(sqlite_s3_file.local_filepath, cmd_line_opts.update_existing?)
end

if cmd_line_opts.list_db_vocab
  sqlite_vocab_list.vocab_words.each { |vocab_word|
    puts "#{vocab_word.word}\t#{vocab_word.definition}\t#{vocab_word.example}"
  }
end

if cmd_line_opts.clear_mysql_db?
  sqlite_vocab_list.clear
elsif !cmd_line_opts.removal_word.nil?
  removal_word = cmd_line_opts.removal_word
  sqlite_vocab_list.remove(removal_word)
end

if cmd_line_opts.input_file
  fail('API Key required') unless cmd_line_opts.api_key

  input_vocab_list = nil
  input_filename   = cmd_line_opts.input_file
  if input_filename.end_with?('txt')
    input_vocab_list = FileVocabList.new(input_filename, cmd_line_opts.input_file_delimiter)
  elsif input_filename.end_with?('db')
    input_vocab_list = KindleSqliteVocabList.new(input_filename)
  else
    fail("Unrecognized filetype: #{input_filename}")
  end

  dictionary  = MultiDictionary.new([
                                      SqliteDictionary.new(sqlite_s3_file.local_filepath),
                                      MerriamWebsterDictionary.new(cmd_line_opts.api_key)
                                    ])
  vocab_words = []
  input_vocab_list.vocab_words.each { |vocab_word|
    if vocab_word.is_defined?
      vocab_words << vocab_word
    else
      begin
        definition = dictionary.definition(vocab_word.word)
        vocab_words << VocabWord.new(vocab_word.word, definition, vocab_word.example)
      rescue OpenURI::HTTPError => e
        puts "Ignoring: unable to fetch the definition for '#{vocab_word.word}': #{e}"
      rescue Exception => e
        puts "Unable to fetch the definition for '#{vocab_word.word}': #{e}\n#{e.backtrace.join("\n")}"
        exit 1
      end
    end
  }

  sqlite_vocab_list.add_vocab_words(vocab_words)
end

if cmd_line_opts.output_file
  File.open(cmd_line_opts.output_file, 'w') { |output_file|
    AnkiNoteCards.new(sqlite_vocab_list.vocab_words, cmd_line_opts.output_file_delimiter).write(output_file)
  }
end

sqlite_vocab_list.close
sqlite_s3_file.upload
